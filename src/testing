#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAXLINE 80 /* The maximum length command */

struct command_t {
  char* name;
  int argc;
  char* argv[MAXLINE];
};

void read_command(char* buffer) {
  fgets(buffer, MAXLINE, stdin);
}

void parse_command(char* buffer, struct command_t* cmd) {
  cmd->name = strtok(buffer, " \n");
  cmd->argc = 0;
  char* token = strtok(NULL, " \n");
  while (token != NULL) {
    cmd->argv[cmd->argc++] = token;
    token = strtok(NULL, " \n");
  }
  cmd->argv[cmd->argc] = NULL;
}

void execute_command(struct command_t* cmd) {
  execvp(cmd->name, cmd->argv);
  perror("exec failed");
  exit(EXIT_FAILURE);
}

void* execute_thread(void* arg) {
  struct command_t* cmd = (struct command_t*)arg;
  execute_command(cmd);
  pthread_exit(NULL);
}

int main(void) {
  char buffer[MAXLINE];
  pthread_t tid;

  while (1) {
    struct command_t* cmd = (struct command_t*)malloc(sizeof(struct command_t));
    if (cmd == NULL) {
      perror("malloc failed");
      exit(EXIT_FAILURE);
    }

    printf("mysh> ");
    read_command(buffer);
    parse_command(buffer, cmd);

    if (strcmp(cmd->name, "exit") == 0) {
      free(cmd);
      break;
    }

    if (pthread_create(&tid, NULL, execute_thread, cmd) != 0) {
      perror("pthread_create failed");
      free(cmd);
      exit(EXIT_FAILURE);
    }

    // don't wait for child thread to finish
    pthread_detach(tid);
  }

  // wait for all child threads to finish
  pthread_exit(NULL);
}
